name: "Validate"
on:
  workflow_call:
jobs:
  # testValidate:
  #   uses: navikt/crm-workflows-base/.github/workflows/ciValidate.yml@master
  #   secrets: inherit

  # ################################################################# #
  # ########################### COMPILE ############################# #
  # ################################################################# #
  setup:
    name: Setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v4

      # Install SF
      - name: Install SF
        uses: navikt/crm-workflows-base/.github/actions/installSF@master

      # Authenticate dev hub
      - name: Authenticate Dev Hub
        uses: navikt/crm-workflows-base/.github/actions/authenticateOrg@master
        with:
          auth-url: ${{ secrets.CRM_PROD_SFDX_URL }}
          alias: prod
          setDefaultUsername: true
          setDefaultDevhubUsername: true

      # Create scratch org
      - name: Create scratch org
        run: sf org create scratch --definition-file config/project-scratch-def.json --alias scratch-org --set-default --duration-days 1

      # Set SCRATCH_ORG_SFDX_AUTH_URL.txt
      # ! saves sf auth url as artifact to circumvent GitHub Actions censoring of the value (which occurs when used with job output)
      # ! artifact is later deleted
      - name: Set SCRATCH_ORG_SFDX_AUTH_URL.txt
        id: set-auth-url
        run: sf org display --target-org scratch-org --verbose --json | jq '.result.sfdxAuthUrl' | sed 's/\"//g' > SCRATCH_ORG_SFDX_AUTH_URL.txt

      # Upload SCRATCH_ORG_SFDX_AUTH_URL.txt
      - name: Upload SF AuthUrl
        uses: actions/upload-artifact@v4
        with:
          name: sfdx-auth-url
          path: SCRATCH_ORG_SFDX_AUTH_URL.txt

      # Install dependent packages
      - name: Install packages
        shell: bash
        run: |
          set -euo pipefail

          : "${CRM_PACKAGE_KEY:=${{ secrets.CRM_PACKAGE_KEY }}}"

          # 1) Collect unique dependency aliases across ALL packageDirectories
          mapfile -t packageAliases < <(
            jq -r '
              [ .packageDirectories[]?                        # all dirs (src-temp, force-app, etc.)
                | .dependencies[]?                            # any dependencies array
                | .package                                    # pick alias
              ] | unique[]?                                   # dedupe + allow 0 results
            ' sfdx-project.json
          )

          if ((${#packageAliases[@]} == 0)); then
            echo "No packages to install (no dependencies found under any packageDirectories)."
            exit 0
          fi

          echo "Dependency aliases to install: ${packageAliases[*]}"

          # 2) For each dependency alias, resolve packageId, versionNumber, latest matching version, and whether to pass a key
          for alias in "${packageAliases[@]}"; do
            echo "----"
            echo "Processing: $alias"

            # Resolve packageId from packageAliases
            packageId=$(jq -r --arg alias "$alias" '.packageAliases[$alias] // empty' sfdx-project.json)
            if [[ -z "$packageId" ]]; then
              echo "WARN: alias '$alias' not found in packageAliases. Skipping."
              continue
            fi
            echo "packageId: $packageId"

            # Resolve requested versionNumber from matching dependency (first match wins if defined multiple places)
            versionNumber=$(jq -r --arg alias "$alias" '
              first(
                .packageDirectories[]? 
                | .dependencies[]? 
                | select(.package == $alias) 
                | .versionNumber
              ) // empty
            ' sfdx-project.json)

            if [[ -z "$versionNumber" ]]; then
              echo "WARN: No versionNumber configured for '$alias' in dependencies. Skipping."
              continue
            fi
            echo "versionNumber (requested): $versionNumber"

            # Query available package versions and pick exact or prefix match (handles .LATEST pattern)
            sf package version list -p "$packageId" --concise \
              --order-by "MajorVersion DESC, MinorVersion DESC, PatchVersion DESC, BuildNumber DESC" \
              --json | jq . > subscriberPackageVersionList.json

            subscriberPackageVersionId=$(jq -r --arg v "$versionNumber" '
              if (.result | length) == 0
              then "NO_RESULT"
              else (
                [ .result[]
                  | select(.Version == $v or (.Version | startswith(($v | split("LATEST")[0]))))
                ] | .[0].SubscriberPackageVersionId
              )
            ' subscriberPackageVersionList.json)

            if [[ "$subscriberPackageVersionId" == "NO_RESULT" || -z "$subscriberPackageVersionId" ]]; then
              echo "ERROR: Could not find a matching version for '$alias' ($versionNumber). Skipping."
              continue
            fi
            echo "SubscriberPackageVersionId (selected): $subscriberPackageVersionId"

            # Decide if this alias gets the installation key:
            # - packageKeyConfig[alias] == false  => NO key
            # - anything else (missing/true)      => USE key (if provided)
            use_key=$(jq -r --arg alias "$alias" '((.packageKeyConfig // {})[$alias] != false) | tostring' sfdx-project.json)
            echo "use_key (per packageKeyConfig): $use_key"

            # Build install args
            args=(sf package install --target-org scratch-org --package "$subscriberPackageVersionId" --no-prompt --wait 15 --publish-wait 10)

            if [[ "$use_key" == "true" ]]; then
              if [[ -n "${CRM_PACKAGE_KEY:-}" ]]; then
                echo "::add-mask::$CRM_PACKAGE_KEY"
                args+=(--installation-key "$CRM_PACKAGE_KEY")
              else
                echo "WARN: '$alias' wants a key (not disabled) but CRM_PACKAGE_KEY is empty. Install will likely fail if a key is required."
              fi
            else
              echo "packageKeyConfig[$alias] == false â†’ installing WITHOUT key."
            fi

            echo "Installing: ${args[*]}"
            "${args[@]}"
          done


  compile:
    name: Compile Metadata
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v4

      # Install SF
      - name: Install SF
        uses: navikt/crm-workflows-base/.github/actions/installSF@master

        # Download SCRATCH_ORG_SFDX_AUTH_URL.txt
      - name: Download SCRATCH_ORG_SFDX_AUTH_URL.txt
        uses: actions/download-artifact@v4
        with:
          name: sfdx-auth-url

      # Authenticate scratch org
      - name: Authenticate scratch org
        run: sf org login sfdx-url --sfdx-url-file ./SCRATCH_ORG_SFDX_AUTH_URL.txt --alias scratch-org --set-default

      # Delete unpackagable and scratch-org folder
      - name: Delete unpackagable
        run: |
          rm -rf ./force-app/unpackagable
          rm -rf ./force-app/unpackagable-with-auto-deploy
          rm -rf ./force-app/scratch-org

      # Deploy source to scratch org
      - name: Push source to scratch org
        run: sf project deploy start

  # ################################################################# #
  # ########################### RUN TESTS ########################### #
  # ################################################################# #
  run-tests:
    name: Run Apex Tests
    needs: compile
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      hasTestClasses: ${{ steps.test-classes-in-repo.outputs.classes }}
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v4

      # Install SF
      - name: Install SF
        uses: navikt/crm-workflows-base/.github/actions/installSF@master

      # Download SCRATCH_ORG_SFDX_AUTH_URL.txt
      - name: Download SCRATCH_ORG_SFDX_AUTH_URL.txt
        uses: actions/download-artifact@v4
        with:
          name: sfdx-auth-url

      # Authenticate scratch org
      - name: Authenticate scratch org
        run: sf org login sfdx-url --sfdx-url-file ./SCRATCH_ORG_SFDX_AUTH_URL.txt --alias scratch-org --set-default

      # Delete unpackagable and scratch-org folder
      - name: Delete unpackagable
        run: |
          rm -rf ./force-app/unpackagable
          rm -rf ./force-app/unpackagable-with-auto-deploy
          rm -rf ./force-app/scratch-org

      # Get all test classes from current repo
      - name: Get all test classes from current repo
        id: test-classes-in-repo
        run: |
          classes=""
          cd force-app
          for p in $( grep -r -l -i --include="*.cls" "@istest" . | sed 's@.*/@@' ); do
            classes+="--tests "$(echo  $p | cut -f 1 -d '.')" "
          done
          classes=$(echo "$classes" | sed 's/[[:space:]]\+$//')
          echo "classes=$classes" >> "$GITHUB_OUTPUT"

      # Run Apex tests in scratch org
      - name: Run Apex tests
        if: steps.test-classes-in-repo.outputs.classes
        run: sf apex run test ${{ steps.test-classes-in-repo.outputs.classes }} --code-coverage --result-format human --output-dir ./tests/apex --wait 30

      # Upload Apex test results
      - name: Upload Apex test results
        if: steps.test-classes-in-repo.outputs.classes && success() || steps.test-classes-in-repo.outputs.classes && failure() # uploads tests results even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: apex-tests
          path: ./tests/apex

  # ################################################################# #
  # ###################### CHECK CODE COVERAGE ###################### #
  # ################################################################# #
  check-code-coverage:
    name: Validate 85% Code Coverage
    needs: run-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v4

      # Download tests
      - name: Download tests
        if: ${{ needs.run-tests.outputs.hasTestClasses }}
        uses: actions/download-artifact@v4
        with:
          name: apex-tests
          path: ./tests/apex

      # Delete unpackagable and scratch-org folder
      - name: Delete unpackagable
        run: |
          rm -rf ./force-app/unpackagable
          rm -rf ./force-app/unpackagable-with-auto-deploy
          rm -rf ./force-app/scratch-org

      # Get code coverage
      - name: Get code coverage
        id: getCodeCoverage
        if: ${{ needs.run-tests.outputs.hasTestClasses }}
        run: |
          classes=()
          cd ./force-app
          for p in $( grep -r -l -i --include="*.cls" "" . | sed 's@.*/@@' ); do
            class=$(echo $p | cut -f 1 -d '.')
            classes[${#classes[@]}]=$class
          done
          cd ..

          totalCovered=0
          totalLines=0

          # ! calculate code coverage for this repo only
          for row in $(jq -c -r '.[]' <<< "$(cat ./tests/apex/test-result-codecoverage.json)"); do
            name=$(jq -r '.name' <<< $row)
            if [[ " ${classes[@]} " =~ " ${name} " ]]; then
            
              covered=$(jq '.totalCovered' <<< $row)
              lines=$(jq '.totalLines' <<< $row)
              
              if [[ $covered != "null" && $lines != "null" && $lines != "0" ]]; then
                let totalCovered+=covered
                let totalLines+=lines
              fi
            fi
          done

          let codecoverage=totalCovered*100/totalLines
          echo "codecoverage=$(echo $codecoverage)" >> $GITHUB_OUTPUT

      # Validate at least 85% code coverage
      - name: Validate at least 85% code coverage
        if: ${{ needs.run-tests.outputs.hasTestClasses }}
        run: |
          codecoverage=${{ steps.getCodeCoverage.outputs.codecoverage }}
          echo "Code coverage is $codecoverage%"

          # ! do the actual check on code coverage percentage
          if [ $codecoverage -lt 85 ]; then
            echo "Because it is less than 85%, the validation failed"
            exit 125
          else
            echo "Because it is equal or more than 85%, the validation succeeded"
          fi

  # ################################################################# #
  # ############################ CLEANUP ############################ #
  # ################################################################# #
  cleanup:
    name: Cleanup
    needs: [setup, compile, run-tests, check-code-coverage]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v4

      # Install SF
      - name: Install SF
        uses: navikt/crm-workflows-base/.github/actions/installSF@master

      # Authenticate dev hub
      - name: Authenticate Dev Hub
        uses: navikt/crm-workflows-base/.github/actions/authenticateOrg@master
        with:
          auth-url: ${{ secrets.CRM_PROD_SFDX_URL }}
          alias: prod
          setDefaultUsername: true
          setDefaultDevhubUsername: true

      # Download SCRATCH_ORG_SFDX_AUTH_URL.txt
      - name: Download SCRATCH_ORG_SFDX_AUTH_URL.txt
        uses: actions/download-artifact@v4
        with:
          name: sfdx-auth-url

      # Authenticate scratch org
      - name: Authenticate scratch org
        run: sf org login sfdx-url --sfdx-url-file ./SCRATCH_ORG_SFDX_AUTH_URL.txt --alias scratch-org --set-default

      # Delete SCRATCH_ORG_SFDX_AUTH_URL.txt
      - name: Delete SCRATCH_ORG_SFDX_AUTH_URL.txt
        uses: geekyeggo/delete-artifact@v5
        with:
          name: sfdx-auth-url

      # Delete scratch orgs
      - name: Delete scratch org
        if: always()
        run: sf org delete scratch --target-org=scratch-org --no-prompt
